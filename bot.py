import json
import time
import hmac
import hashlib
import base64
import requests
import schedule
import threading
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import config

USERS_FILE = "users.json"

# ---------- –†–æ–±–æ—Ç–∞ –∑ —é–∑–µ—Ä–∞–º–∏ ----------
def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=4)

def get_discount(level):
    return {0:0,1:20,2:20,3:25,4:25,5:30,6:30,7:35,8:35,9:40,10:40}.get(level,45)

def get_bonus(level):
    bonuses = {
        1: "‚ùå –±–æ–Ω—É—Å—ñ–≤",
        2: "‚òï –∫–∞–≤–∞",
        3: "‚òï‚òï –¥–≤—ñ –∫–∞–≤–∏",
        4: "ü•§ –ø—Ä–æ—Ç–µ—ó–Ω–æ–≤–∏–π –∫–æ–∫—Ç–µ–π–ª—å",
        5: "‚òï + ü•§",
        6: "‚òï‚òï + ü•§"
    }
    return bonuses.get(level, "‚òï‚òï + ü•§")

# ---------- WFP ----------
def generate_signature(data):
    keys = [
        "merchantAccount","merchantDomainName","orderReference","orderDate",
        "amount","currency"
    ]
    s = ";".join([str(data[k]) for k in keys])
    return base64.b64encode(hmac.new(config.MERCHANT_SECRET_KEY.encode(), s.encode(), hashlib.md5).digest()).decode()

def create_invoice(user_id, price=100):
    order_ref = f"sub_{user_id}_{int(time.time())}"
    data = {
        "merchantAccount": config.MERCHANT_ACCOUNT,
        "merchantDomainName": config.MERCHANT_DOMAIN_NAME,
        "orderReference": order_ref,
        "orderDate": int(time.time()),
        "amount": price,
        "currency": "UAH",
        "productName": ["–ü—ñ–¥–ø–∏—Å–∫–∞"],
        "productPrice": [price],
        "productCount": [1],
        "language": "UA",
        "serviceUrl": config.CALLBACK_URL,
        "transactionType": "PURCHASE",   # ‚Üê –ø–µ—Ä—à–∞ –æ–ø–ª–∞—Ç–∞ –≤—Ä—É—á–Ω—É
        "apiVersion": 1
    }
    data["merchantSignature"] = generate_signature(data)

    r = requests.post(
        "https://api.wayforpay.com/api",
        data=json.dumps(data),
        headers={"Content-Type": "application/json"},
        timeout=30
    )

    print("DEBUG WFP request:", data)
    print("DEBUG WFP response:", r.text)

    return r.json()   # <-- –¥–æ–¥–∞–π –¥–ª—è –¥–µ–±–∞–≥—É

# ---------- Telegram ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = load_users()
    if user_id not in users:
        users[user_id] = {"level":0,"payments":0,"last_payment":None}
        save_users(users)

    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –ú—ñ–π —Ä—ñ–≤–µ–Ω—å", callback_data="my_level")],
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="pay")],
        [InlineKeyboardButton("üìä –Ü–Ω—Ñ–æ –ø—Ä–æ —Ä—ñ–≤–Ω—ñ", callback_data="info")]
    ]
    await update.message.reply_text("–í—ñ—Ç–∞—é —É –∫–ª—É–±—ñ! üéâ", reply_markup=InlineKeyboardMarkup(keyboard))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    users = load_users()

    if query.data == "my_level":
        level = users[user_id]["level"]
        payments = users[user_id]["payments"]
        text = f"üìå –†—ñ–≤–µ–Ω—å: {level}\n–ó–Ω–∏–∂–∫–∞: {get_discount(level)}%\n–ë–æ–Ω—É—Å: {get_bonus(level)}\n–û–ø–ª–∞—Ç: {payments}"
        await query.edit_message_text(text)

    elif query.data == "info":
        text = "üìä –°–∏—Å—Ç–µ–º–∞ —Ä—ñ–≤–Ω—ñ–≤:\n1-2 –æ–ø–ª–∞—Ç–∏ ‚Üí 1 —Ä—ñ–≤–µ–Ω—å (20%)\n3-4 ‚Üí 2 —Ä—ñ–≤–µ–Ω—å (25%)\n5-6 ‚Üí 3 —Ä—ñ–≤–µ–Ω—å (30%)\n7-8 ‚Üí 4 —Ä—ñ–≤–µ–Ω—å (35%)\n9-10 ‚Üí 5 —Ä—ñ–≤–µ–Ω—å (40%)\n11+ ‚Üí 6 —Ä—ñ–≤–µ–Ω—å (45%)"
        await query.edit_message_text(text)

    elif query.data == "pay":
        try:
            invoice = create_invoice(user_id)

            if "invoiceUrl" in invoice:
                pay_url = invoice["invoiceUrl"]
                await query.edit_message_text(f"üí≥ –°–ø–ª–∞—Ç—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É: {pay_url}")
            else:
                    # –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É WFP –ø—Ä—è–º–æ –≤ –±–æ—Ç—ñ
                await query.edit_message_text(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ WayForPay:\n{json.dumps(invoice, indent=2, ensure_ascii=False)}"
                )

        except Exception as e:
            await query.edit_message_text(f"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

# ---------- –ê–≤—Ç–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ----------
def check_subscriptions():
    users = load_users()
    for uid, data in users.items():
        if not data["last_payment"]:
            continue
        last = datetime.fromisoformat(data["last_payment"])
        if datetime.now() - last > timedelta(days=3):
            data["level"] = max(0, data["level"]-1)
    save_users(users)

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

schedule.every().day.at("10:00").do(check_subscriptions)

# ---------- MAIN ----------
def main():
    app = Application.builder().token(config.TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))

    t = threading.Thread(target=run_scheduler, daemon=True)
    t.start()
    app.run_polling()

if __name__ == "__main__":
    main()